Entity Framework Core 
---------------------

Application 
-----------
E-Commerce Application
HRMS
Leave Management Application 

User Interface --- Service(Web API) ---- Database(RDBMS)

Data Access Logic 
-----------------
Java -- JDBC 
.NET -- ADO.NET 

ADO.Net 
-------
It is data access technology to create data driven application
It was introduced from the First version of .Net Framework
It work with data provider and data sets
Problem with this technology is that it requires you write a lot code for doing simple as well as operation

ADO.NET(Select all employees)
-----------------------------
SqlConnection conn = new SqlConnection("connection string");

SqlCommand cmd = new SqlCommand("select * from Employees",conn);

conn.Open();

SqlDataReader reader= cmd.ExecuteReader();

if(reader.HasRows)
{	
	while(reader.Read())
	{
		//
	}
}
else
{
	
}
reader.Close();
conn.Close();

Entity Framework
----------------
Entity Framework is an ORM(Object Relational Mapper)
It helps consider the database object as C# object or collection
It enables developers to work with database using .NET Objects
eg :- 
	Employees Table ---> Employees Collection 
	
	MyContext context = new MyContext();
	
	var data = context.Employees.ToList();
	
	foreach(var emp in data)
	{
		//logic
	}
	
It generates all the data access logic.
It work only with .Net Framework.

	.NET Framework 3.5  EF 1.0
	.NET Framework 4.0 	EF 4.0
	.NET Framework 4.5  EF 5.0 
						EF 6.x
						
Entity Framework Core 
---------------------
Entity Framework Core is the lastest release of the Entity Framework
It is lightweight, extensible and cross-platform in nature
It had great performance as compared to EF 6.x
It is supported on .NET Core as well as on .NET Framework 4.5+
It provides a variety of data providers which can help us connect our application to different databases with minimal change in the code.

EF Core Version 
---------------
	.NET Core 2.X --> EF Core 2.0,2.1,2.2
	.NET Core 3.1(LTS) --> EF Core 3.1
	.NET Core 5 --> EF Core 5 
	.NET 6 --> EF Core 6
	.NET 7(preview) --> EF Core 7 (preview)
	
	
Approaches to Implement EF 5.x and 6.x
-------------------------------------
Database First 
Code First 
Model First 

Approaches to Implement EF Core 
-------------------------------
Code First 
Reverse Engineering (Database First)

EF Core Power Tools (Visual Studio)

Model (EDM)
-----------
Domain Classes 
	-It is simple POCO(Plain old CLR Objects) class which acts as Entity Classes 
	-These classes are mapped to database tables
	
Database Context
	-It is like a bridge between the application and the data source
	-It helps objects to query and save data

Tools 
-----
Visual Studio Code
.NET Core 3.1 and 6.0 SDK
SQL Express Edition 
SQL Server Management Studio

Simple Example of Entity Framework Core 
---------------------------------------
1)Create a Console Application 
	
	dotnet new console -f netcoreapp3.1
	
2)Adding the EF Core package using nuget package manager

	Microsoft.EntityFrameworkCore
	Microsoft.EntityFrameworkCore.SqlServer (Data Provider)
	Microsoft.EntityFrameworkCore.Design
	Microsoft.EntityFrameworkCore.Tools 
	
dotnet add package Microsoft.EntityFrameworkCore --version 3.1.29
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 3.1.29
dotnet add package Microsoft.EntityFrameworkCore.Design --version 3.1.29
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 3.1.29

3)Creating Entity Models
4)Creating a Database Context
5)To perform reading and writing of data to database using Create and Drop API's

EF Core Create and Drop API's
-----------------------------
The EnsureCreated and EnsureDeleted methods provider as lightweight alternative to Migration for managing the database schema.
These methods are useful in scenarios when the data is transient and can be dropped when the schema changes e.g. Prototyping in test or for local caches.

Migrations 
----------
Migrations in EF Core provides a way to incrementally update the database schema to keep it in sync with the application's data model while preserving the data in database.

Install the dotnet-ef tools 
---------------------------
dotnet tool install --global dotnet-ef 

dotnet tool update --global dotnet-ef 

Creating the First Migration 
----------------------------
dotnet ef migratons add InitialDBCreation

To update the database with the Migration 
-----------------------------------------
dotnet ef database update 

LINQ :- Language Integrated Query 

It allows us to query data from multiple datasource(collections,array,xml, sqldata...) using languages likes C# or VB.Net.
It will help you write sql like queries using the programming langauge.

update <tablename>
set col1=value1,col2=value2......
where <condition>

To generate logs for sql queries in VS or VS Code we need use the logging feature of .NET Core 

dotnet add package Microsoft.Extensions.Logging.Console --version 3.1.29

Migrations
Performing DML operation
Logging in EF Core 

Using Data Annotation to apply constraint 
Seeding data to the table using DbContext OnModelCreating()
Work with simple relationship 
RAW SQL Queries and Stored Procedure, User Defined Function 
Connected and Disconnected Architecture

SQL Constraints
---------------
Primary Key 
Foreign Key 
Not Null 
.....

Data Annotations 
----------------
System.ComponentModel.DataAnnotation

Required 
StringLength 
DataType......

RAW SQL Queries and Stored Procedure 
------------------------------------
FromSqlRaw()
FromSqlInterpolated()

Connected and Disconnected Architecture in EF Core 
--------------------------------------------------
Connected Architecture 
----------------------
One context object is used for all the operations (insert,update,select and delete)on the entity.
In this approach , the context object keeps track of all the changes that is happening to  the entity.

E-Commerce Application 
-----------------------
Login into the application 
Navigate to Profile Page 
Enter the new mobile number and update 

Disconnected Architecture
-------------------------
In this approach, different instance of context are used to perform different operations on the entity.

	e.g:- first instance can be used to search the entity
		  second instance can be used to modify the entity 
		  
	In the above example context object cannot track the changes done to the entity.
	
	We explicitly tell the context object which operations has to be perfomed. 
	It is specified with the help of EntityState Enumeration and State property of the entity 
	
EntityState 
-----------
Added 
Deleted 
Modified 
Detached 
Unchanged 

Relationship in EF Core 
-----------------------
Relationship defines how two entites are related to each other.
In Database, this is done with the help of primary and foreign key.

One to One (Employee ---> Contact Details, Vehicle-->Registration)
One to Many (Department-->Employees)
Many to Many (Employee-->Projects)

Principal Entity :- This is the entity that contains the primary key properties. Sometime refered as the parent of the relationship.

Principal Key :- The properties that uniquely identify the principle. This is primary key 

Dependent Entity :- This is the entity that contains the foreign key properties. Sometime refered as child table 

Foreign Key :- The properties in the dependent entity that are used to store the principal key values for the related entity.

Navigation Key :- A property defined on the principal and/or dependent entity that references the related entity 

	Collection Navigation Property :- A Navigation property that contains reference to many related properties 
	
	Reference Navigation Property:- A navigation property that holds reference to a sinfle related entity 
	
	Inverse Navigation Property :- It refers to the navigation property on the other end of the relationship 
	
Approaches to implement relationship in EF Core 
-----------------------------------------------
EF Core Convention (Navigation Property) 
Data Annotations
Fluent API 

EF Core Convention & Data Annotations (One to One and One to Many)
Fluent API (One to One , One to Many and Many to Many)

One to One (Employee ---> EmployeeAddress)

Fluent API
----------
EF Fluent API is used to configure domain classes to override conventions
EF Fluent API is based on the Fluent API Design Pattern i.e. Fluent Interfaces where the results are formulated by method chaining
In EF Core , ModelBuilder class acts as a Fluent API by using it we can configure many different thing as it provides more configuration options than other approaches

	Model Configuration 
	Entity Configuration 
	Property Configuration
	
Inheritance in EF Core 
----------------------
EF Core can map .NET Types hierarchy to a database.
This allows you to write your .NET entites in code as usual, using base and deived types and have EF Core create the appropriate database schema , issue queries etc 

Student - FullTimeStudent 
		  PartTimeStudent
		  
Table Per Hierarchy (TPH)(EF Core 1.0 to 3.1, also in 5.0 , EF 6)
	-One table is created for the entire class hierarchy
	-Includes a discriminator column to distinguish between the inheritance classes
	
Table Per Type (TPT) (EF Core 5 , EF 6)
	-Create a seperate table for each domain class

Table Per Concrete Class (TPC) (EF 6)
	-One table for one concrete class but no table for the abstract class
	-All the properties of the abstract class are included in the concrete class 
	
Reverse Engineering(Database First) in EF Core
----------------------------------------------
This approach , allows us to create a Entity Data Model from and existing database.

dotnet ef dbcontext scaffold "connection string" data-provider --context-dir Data --output-dir Models

dotnet ef dbcontext scaffold "data source=CTAADPG02MWBG;initial catalog=MusicStoreDB;integrated security=true" Microsoft.EntityFrameworkCore.SqlServer --context-dir Data --output-dir Models

Loading Related Data
--------------------

Eager Loading :- Related data is loaded from the database as part of the initial query

	Include()
	ThenInclude()

Explicit Loading :- Related data is explicitly loaded from tha database at later time. It is similar to lazy loading but the related data loads only when explicit call to Load or Query method is done to the related entites DbContext.Entry()

Lazy Loading :- Related data is transparently loaded from the database when the navigation properties are accessed.Allows to retreive data whenever it is needed.
By default Lazy Loading is not support in EF Core, We need to either add the proxy package or inject ILazyLoaded Interface